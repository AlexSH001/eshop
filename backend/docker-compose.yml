# ========================================
# E-Shop Backend Production Docker Compose
# ========================================
# Production deployment configuration

services:
  # ========================================
  # Backend API Service (Production)
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: eshop-backend-prod
    ports:
      - "3001:3001"
    environment:
      # Application Configuration
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      
      # Database Configuration (PostgreSQL)
      DB_CLIENT: postgres
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-eshop}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis Configuration
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # Security Configuration
      SECURE_COOKIES: true
      HTTPS_ONLY: true
      STRICT_TRANSPORT_SECURITY: true
      
      # File Upload Configuration
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 5242880
      
      # Logging Configuration
      LOG_LEVEL: info
      LOG_FILE_PATH: /app/logs
      
      # Monitoring Configuration
      SENTRY_DSN: ${SENTRY_DSN}
      
    volumes:
      # Persist uploads and logs
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - eshop-network
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # Redis Service (Production)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: eshop-redis-prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - eshop-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ========================================
  # PostgreSQL Service (Production)
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: eshop-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-eshop}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust  # Add this for initial setup
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - eshop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Nginx Reverse Proxy (Optional)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: eshop-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - eshop-network
    restart: unless-stopped
    profiles:
      - nginx

# ========================================
# Networks
# ========================================
networks:
  eshop-network:
    driver: bridge

# ========================================
# Volumes
# ========================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
